#include <stdio.h>
#include <limits.h>

#define INF 99

int min(int a, int b) {
    return (a < b) ? a : b;
}

int shortestPath(int N, int graph[N][N]) {
    int cost[N];
    int next[N];
    int path[N];
    cost[N - 1] = 0;
    next[N - 1] = -1;
    
    for (int i = N - 2; i >= 0; i--) {
        cost[i] = INF;
        for (int j = 0; j < N; j++) {
            if (graph[i][j] != INF && graph[i][j] + cost[j] < cost[i]) {
                cost[i] = graph[i][j] + cost[j];
                next[i] = j;
            }
        }
    }
    
    int current = 0;
    int index = 0;
    path[index++] = current;
    
    while (current != -1) {
        current = next[current];
        if (current != -1) {
            path[index++] = current;
        }
    }
    
    printf("Shortest path: ");
    for (int i = 0; i < index; i++) {
        printf("%d", path[i]);
        if (i != index - 1) {
            printf(" -> ");
        }
    }
    printf("\n");
    
    return cost[0];
}

int main() {
    int N;
    printf("Enter the total number of vertices in the graph:\n");
    scanf("%d", &N);
    
    int graph[N][N];
    
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (i == j) {
                graph[i][j] = INF;
            } else {
                printf("Enter the weight between %d and %d: ", i, j);
                scanf("%d", &graph[i][j]);
            }
        }
    }
    
    int min_cost = shortestPath(N, graph);
    printf("The minimum distance is %d\n", min_cost);
    
    return 0;
}